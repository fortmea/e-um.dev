create table "public"."nametypes" (
    "id" bigint generated by default as identity not null,
    "name" text not null
);


alter table "public"."nametypes" enable row level security;

create table "public"."notes" (
    "id" uuid not null default uuid_generate_v4(),
    "title" text not null,
    "content" text not null,
    "author" uuid not null,
    "is_public" boolean default false,
    "created_at" timestamp without time zone default now(),
    "short_id" text
);


alter table "public"."notes" enable row level security;

create table "public"."records" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "owner" uuid not null default auth.uid(),
    "name" text not null,
    "type" bigint not null,
    "status" bigint not null default '1'::bigint,
    "target" text not null,
    "proxied" boolean not null default false,
    "cloudflareId" text
);


alter table "public"."records" enable row level security;

create table "public"."secrets" (
    "id" bigint generated by default as identity not null,
    "name" text,
    "value" text
);


alter table "public"."secrets" enable row level security;

create table "public"."stats" (
    "id" bigint generated by default as identity not null,
    "name" text not null,
    "value" numeric not null
);


alter table "public"."stats" enable row level security;

create table "public"."status" (
    "id" bigint generated by default as identity not null,
    "description" character varying not null
);


alter table "public"."status" enable row level security;

CREATE UNIQUE INDEX nametypes_name_key ON public.nametypes USING btree (name);

CREATE UNIQUE INDEX nametypes_pkey ON public.nametypes USING btree (id);

CREATE UNIQUE INDEX notes_pkey ON public.notes USING btree (id);

CREATE UNIQUE INDEX notes_short_id_key ON public.notes USING btree (short_id);

CREATE UNIQUE INDEX record_pkey ON public.records USING btree (id);

CREATE UNIQUE INDEX "records_cloudflareId_key" ON public.records USING btree ("cloudflareId");

CREATE UNIQUE INDEX secrets_name_key ON public.secrets USING btree (name);

CREATE UNIQUE INDEX secrets_pkey ON public.secrets USING btree (id);

CREATE UNIQUE INDEX stats_name_key ON public.stats USING btree (name);

CREATE UNIQUE INDEX stats_pkey ON public.stats USING btree (id);

CREATE UNIQUE INDEX status_description_key ON public.status USING btree (description);

CREATE UNIQUE INDEX status_pkey ON public.status USING btree (id);

alter table "public"."nametypes" add constraint "nametypes_pkey" PRIMARY KEY using index "nametypes_pkey";

alter table "public"."notes" add constraint "notes_pkey" PRIMARY KEY using index "notes_pkey";

alter table "public"."records" add constraint "record_pkey" PRIMARY KEY using index "record_pkey";

alter table "public"."secrets" add constraint "secrets_pkey" PRIMARY KEY using index "secrets_pkey";

alter table "public"."stats" add constraint "stats_pkey" PRIMARY KEY using index "stats_pkey";

alter table "public"."status" add constraint "status_pkey" PRIMARY KEY using index "status_pkey";

alter table "public"."nametypes" add constraint "nametypes_name_key" UNIQUE using index "nametypes_name_key";

alter table "public"."notes" add constraint "notes_author_fkey" FOREIGN KEY (author) REFERENCES auth.users(id) not valid;

alter table "public"."notes" validate constraint "notes_author_fkey";

alter table "public"."notes" add constraint "notes_short_id_key" UNIQUE using index "notes_short_id_key";

alter table "public"."records" add constraint "record_owner_fkey" FOREIGN KEY (owner) REFERENCES auth.users(id) not valid;

alter table "public"."records" validate constraint "record_owner_fkey";

alter table "public"."records" add constraint "record_status_fkey" FOREIGN KEY (status) REFERENCES status(id) not valid;

alter table "public"."records" validate constraint "record_status_fkey";

alter table "public"."records" add constraint "record_type_fkey" FOREIGN KEY (type) REFERENCES nametypes(id) not valid;

alter table "public"."records" validate constraint "record_type_fkey";

alter table "public"."records" add constraint "records_cloudflareId_key" UNIQUE using index "records_cloudflareId_key";

alter table "public"."secrets" add constraint "secrets_name_key" UNIQUE using index "secrets_name_key";

alter table "public"."stats" add constraint "stats_name_key" UNIQUE using index "stats_name_key";

alter table "public"."status" add constraint "status_description_key" UNIQUE using index "status_description_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.decrement_stats_counter()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
    -- Decrementa o valor da coluna "value" no registro onde "name = 'count'"
    UPDATE stats
    SET value = value - 1
    WHERE name = 'count';

    RETURN OLD;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.set_short_id()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
  truncated_id TEXT;
BEGIN
  -- Gerar um UUID truncado para 15 caracteres
  truncated_id := LEFT(NEW.id::TEXT, 15);

  -- Verificar se já existe um ID com o mesmo valor na tabela
  WHILE EXISTS (SELECT 1 FROM notes WHERE short_id = truncated_id) LOOP
    -- Gerar outro UUID truncado caso haja colisão
    truncated_id := LEFT(gen_random_uuid()::TEXT, 15);
  END LOOP;

  -- Definir o valor único no campo short_id
  NEW.short_id := truncated_id;

  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.update_record_count()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
    -- Incrementa o valor da coluna "value" no registro onde "name = 'count'"
    UPDATE stats
    SET value = value + 1
    WHERE name = 'count';

    RETURN NEW;
END;
$function$
;

grant delete on table "public"."nametypes" to "anon";

grant insert on table "public"."nametypes" to "anon";

grant references on table "public"."nametypes" to "anon";

grant select on table "public"."nametypes" to "anon";

grant trigger on table "public"."nametypes" to "anon";

grant truncate on table "public"."nametypes" to "anon";

grant update on table "public"."nametypes" to "anon";

grant delete on table "public"."nametypes" to "authenticated";

grant insert on table "public"."nametypes" to "authenticated";

grant references on table "public"."nametypes" to "authenticated";

grant select on table "public"."nametypes" to "authenticated";

grant trigger on table "public"."nametypes" to "authenticated";

grant truncate on table "public"."nametypes" to "authenticated";

grant update on table "public"."nametypes" to "authenticated";

grant delete on table "public"."nametypes" to "service_role";

grant insert on table "public"."nametypes" to "service_role";

grant references on table "public"."nametypes" to "service_role";

grant select on table "public"."nametypes" to "service_role";

grant trigger on table "public"."nametypes" to "service_role";

grant truncate on table "public"."nametypes" to "service_role";

grant update on table "public"."nametypes" to "service_role";

grant delete on table "public"."notes" to "anon";

grant insert on table "public"."notes" to "anon";

grant references on table "public"."notes" to "anon";

grant select on table "public"."notes" to "anon";

grant trigger on table "public"."notes" to "anon";

grant truncate on table "public"."notes" to "anon";

grant update on table "public"."notes" to "anon";

grant delete on table "public"."notes" to "authenticated";

grant insert on table "public"."notes" to "authenticated";

grant references on table "public"."notes" to "authenticated";

grant select on table "public"."notes" to "authenticated";

grant trigger on table "public"."notes" to "authenticated";

grant truncate on table "public"."notes" to "authenticated";

grant update on table "public"."notes" to "authenticated";

grant delete on table "public"."notes" to "service_role";

grant insert on table "public"."notes" to "service_role";

grant references on table "public"."notes" to "service_role";

grant select on table "public"."notes" to "service_role";

grant trigger on table "public"."notes" to "service_role";

grant truncate on table "public"."notes" to "service_role";

grant update on table "public"."notes" to "service_role";

grant delete on table "public"."records" to "anon";

grant insert on table "public"."records" to "anon";

grant references on table "public"."records" to "anon";

grant select on table "public"."records" to "anon";

grant trigger on table "public"."records" to "anon";

grant truncate on table "public"."records" to "anon";

grant update on table "public"."records" to "anon";

grant delete on table "public"."records" to "authenticated";

grant insert on table "public"."records" to "authenticated";

grant references on table "public"."records" to "authenticated";

grant select on table "public"."records" to "authenticated";

grant trigger on table "public"."records" to "authenticated";

grant truncate on table "public"."records" to "authenticated";

grant update on table "public"."records" to "authenticated";

grant delete on table "public"."records" to "service_role";

grant insert on table "public"."records" to "service_role";

grant references on table "public"."records" to "service_role";

grant select on table "public"."records" to "service_role";

grant trigger on table "public"."records" to "service_role";

grant truncate on table "public"."records" to "service_role";

grant update on table "public"."records" to "service_role";

grant delete on table "public"."secrets" to "anon";

grant insert on table "public"."secrets" to "anon";

grant references on table "public"."secrets" to "anon";

grant select on table "public"."secrets" to "anon";

grant trigger on table "public"."secrets" to "anon";

grant truncate on table "public"."secrets" to "anon";

grant update on table "public"."secrets" to "anon";

grant delete on table "public"."secrets" to "authenticated";

grant insert on table "public"."secrets" to "authenticated";

grant references on table "public"."secrets" to "authenticated";

grant select on table "public"."secrets" to "authenticated";

grant trigger on table "public"."secrets" to "authenticated";

grant truncate on table "public"."secrets" to "authenticated";

grant update on table "public"."secrets" to "authenticated";

grant delete on table "public"."secrets" to "service_role";

grant insert on table "public"."secrets" to "service_role";

grant references on table "public"."secrets" to "service_role";

grant select on table "public"."secrets" to "service_role";

grant trigger on table "public"."secrets" to "service_role";

grant truncate on table "public"."secrets" to "service_role";

grant update on table "public"."secrets" to "service_role";

grant delete on table "public"."stats" to "anon";

grant insert on table "public"."stats" to "anon";

grant references on table "public"."stats" to "anon";

grant select on table "public"."stats" to "anon";

grant trigger on table "public"."stats" to "anon";

grant truncate on table "public"."stats" to "anon";

grant update on table "public"."stats" to "anon";

grant delete on table "public"."stats" to "authenticated";

grant insert on table "public"."stats" to "authenticated";

grant references on table "public"."stats" to "authenticated";

grant select on table "public"."stats" to "authenticated";

grant trigger on table "public"."stats" to "authenticated";

grant truncate on table "public"."stats" to "authenticated";

grant update on table "public"."stats" to "authenticated";

grant delete on table "public"."stats" to "service_role";

grant insert on table "public"."stats" to "service_role";

grant references on table "public"."stats" to "service_role";

grant select on table "public"."stats" to "service_role";

grant trigger on table "public"."stats" to "service_role";

grant truncate on table "public"."stats" to "service_role";

grant update on table "public"."stats" to "service_role";

grant delete on table "public"."status" to "anon";

grant insert on table "public"."status" to "anon";

grant references on table "public"."status" to "anon";

grant select on table "public"."status" to "anon";

grant trigger on table "public"."status" to "anon";

grant truncate on table "public"."status" to "anon";

grant update on table "public"."status" to "anon";

grant delete on table "public"."status" to "authenticated";

grant insert on table "public"."status" to "authenticated";

grant references on table "public"."status" to "authenticated";

grant select on table "public"."status" to "authenticated";

grant trigger on table "public"."status" to "authenticated";

grant truncate on table "public"."status" to "authenticated";

grant update on table "public"."status" to "authenticated";

grant delete on table "public"."status" to "service_role";

grant insert on table "public"."status" to "service_role";

grant references on table "public"."status" to "service_role";

grant select on table "public"."status" to "service_role";

grant trigger on table "public"."status" to "service_role";

grant truncate on table "public"."status" to "service_role";

grant update on table "public"."status" to "service_role";

create policy "Allow access to own notes"
on "public"."notes"
as permissive
for select
to public
using ((author = auth.uid()));


create policy "Allow access to public notes"
on "public"."notes"
as permissive
for select
to public
using ((is_public = true));


create policy "Allow delete own notes"
on "public"."notes"
as permissive
for delete
to public
using ((author = auth.uid()));


create policy "Allow authenticated users to delete their records"
on "public"."records"
as permissive
for delete
to authenticated
using ((owner = auth.uid()));


create policy "Enable insert for authenticated users only"
on "public"."records"
as permissive
for insert
to authenticated
with check ((auth.uid() IS NOT NULL));


create policy "Enable read for authenticated users only"
on "public"."records"
as permissive
for select
to authenticated
using ((owner = auth.uid()));


create policy "Enable update for users logged in"
on "public"."records"
as permissive
for update
to public
using ((owner = auth.uid()))
with check ((owner = auth.uid()));


create policy "Enable public to load record limit"
on "public"."secrets"
as permissive
for select
to public
using ((name = 'limit'::text));


create policy "Allow read to all"
on "public"."stats"
as permissive
for select
to public
using (true);


CREATE TRIGGER generate_short_id BEFORE INSERT ON public.notes FOR EACH ROW EXECUTE FUNCTION set_short_id();

CREATE TRIGGER decrement_stats_trigger AFTER DELETE ON public.records FOR EACH ROW EXECUTE FUNCTION decrement_stats_counter();

CREATE TRIGGER update_record_stats AFTER INSERT ON public.records FOR EACH ROW EXECUTE FUNCTION update_record_count();


